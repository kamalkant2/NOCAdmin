http://groovy-lang.org/style-guide.html

#no semicolon, "return" keyword optional, 
# Groovy lets you decide whether you use explicit strong typing, or when you use def.make a choice, either use def or a type.
# When using def in Groovy, the actual type holder is Object (so you can assign any object to variables defined with def,
# and return any kind of object if a method is declared returning def).

========================Example Code ============================
https://github.com/fabric8io/jenkins-pipeline-library/tree/master/vars
https://github.com/fabric8io/fabric8-pipeline-library




+++++++++++++++++++++ Terminology and Definition +++++++++++++++++++++
All valid @Declarative Pipelines@ must be enclosed within a pipeline block, for example:

pipeline {
    /* insert Declarative Pipeline here */
}
#The top-level of the Pipeline must be a block, specifically: pipeline { }
#No semicolons as statement separators. Each statement has to be on its own line
#Blocks must only consist of Sections, Directives, Steps, or assignment statements.

#---@Sections@ in Declarative Pipeline typically contain one or more @Directives@ or @Steps@
#--- Directives
@agent 
#The @agent directive@ specifies where the entire Pipeline, or a specific stage, will execute in the Jenkins environment 
#depending on where the @agent directive is placed. The directive must be defined at the top-level inside the pipeline block, 
#but stage-level usage is optional.
#Required            Yes
#Parameters          Described below
#Allowed             In the top-level @pipeline block and each @stage block

#@Parameters
#In order to support the wide variety of use-cases Pipeline authors may have, the @agent directive supports a few different types of parameters. 
#These parameters can be applied at the top-level of the @pipeline block, or within each @stage directive.
#any
#Execute the @Pipeline, or @stage, on any available agent. For example: agent any

#none
#When applied at the top-level of the @pipeline block no global agent will be allocated for the entire Pipeline run and 
#each @stage directive will need to contain its own agent directive. For example: @agent none

#label
#Execute the @Pipeline, or @stage, on an agent available in the Jenkins environment with the provided label. For example: @agent { label 'my-defined-label' }

#node
#@agent { node { label 'labelName' } } behaves the same as agent { label 'labelName' }, but node allows 
#for additional options (such as @customWorkspace).

#@docker
#Execute the @Pipeline, or @stage, with the given container which will be dynamically provisioned on a node pre-configured to accept 
Docker-based Pipelines, or on a node matching the optionally defined label parameter. docker also optionally accepts an args parameter 
which may contain arguments to pass directly to a docker run invocation. For example: agent { docker 'maven:3-alpine' } or

agent {
    docker {
        image 'maven:3-alpine'
        label 'my-defined-label'
        args  '-v /tmp:/tmp'
    }
}


#@dockerfile
#Execute the Pipeline, or stage, with a container built from a @Dockerfile contained in the source repository. 
#Conventionally this is the @Dockerfile in the root of the source repository: agent { dockerfile true }. 
#If building a Dockerfile in another directory, use the dir option: agent { dockerfile { dir 'someSubDir' } }.

#####Common Options
#These are a few options for two or more @agent implementations. They are not required unless explicitly stated.

# label
#A string. The @label on which to run the Pipeline or individual stage.
#This option is valid for @node, @docker and @dockerfile, and is required for @node.

#customWorkspace
#A string. Run the @Pipeline or individual @stage this @agent is applied to within this custom workspace, rather than the default. 
#It can be either a relative path, in which case the custom workspace will be under the workspace root on the node, or an absolute path. 
#For example:

agent {
    node {
        label 'my-defined-label'
        customWorkspace '/some/other/path'
    }
}
This option is valid for node, docker and dockerfile.

##reuseNode
#A boolean, false by default. If true, run the container in the node specified at the top-level of the Pipeline, 
#in the same workspace, rather than on a new node entirely.

#This option is valid for docker and dockerfile, and only has an effect when used on an @agent for an individual @stage.

Example
Jenkinsfile (Declarative Pipeline)
pipeline {
    agent { docker 'maven:3-alpine' } 
    stages {
        stage('Example Build') {
            steps {
                sh 'mvn -B clean verify'
            }
        }
    }
}

-----------------Stage-level agent directive-------------------------

Jenkinsfile (Declarative Pipeline)
pipeline {
    agent none 
    stages {
        stage('Example Build') {
            agent { docker 'maven:3-alpine' } 
            steps {
                echo 'Hello, Maven'
                sh 'mvn --version'
            }
        }
        stage('Example Test') {
            agent { docker 'openjdk:8-jre' } 
            steps {
                echo 'Hello, JDK'
                sh 'java -version'
            }
        }
    }
}

# we can see that there are two main components OF PIPELINE . agent and stages. we may have options too (only for pipeline not in stages)
# we can also define parameters and triggers ( only limited to pipeline not in stages) Find below ore details
# stages are many, agent might be from different sources. 
#  every stage has agent and steps defined. it may contain environment also. 
# steps contains commands 
#Tools directive can be used inside the pipeline and stages too

# Defining agent none at the top-level of the Pipeline ensures that an Executor will not be unnecessarily. 
# --Using agent none requires that each stage directive contain an agent directive.
# Execute the steps contained within this stage using the given container.
# Execute the steps contained within this steps using a different image from the previous stage.

================================
++++++# environment +++++++++++++++

Directive #2 
#The @environment directive specifies a sequence of key-value pairs which will be defined as environment variables for the all steps, 
#or stage-specific steps, depending on where the @environment directive is located within the Pipeline.

#This directive supports a special helper method credentials() which can be used to access pre-defined Credentials by their
#identifier in the Jenkins environment. For Credentials which are of type "Secret Text", the credentials() method will ensure 
#that the environment variable specified contains the Secret Text contents. For Credentials which are of type "Standard username
#and password", the environment variable specified will be set to username:password and two additional environment variables 
#will be automatically be defined: MYVARNAME_USR and MYVARNAME_PSW respective.

#Required        No
#Parameters      None
#Allowed         Inside the pipeline block, or within stage directives.

#Example
Jenkinsfile (Declarative Pipeline)
pipeline {
    agent any
    environment { 
        CC = 'clang'
    }
    stages {
        stage('Example') {
            environment { 
                AN_ACCESS_KEY = credentials('my-prefined-secret-text') 
            }
            steps {
                sh 'printenv'
            }
        }
    }
}

=====conclusions==
#	An environment directive used in the top-level pipeline block will apply to all steps within the Pipeline.
#An environment directive defined within a stage will only apply the given environment variables to steps within the stage.
#The environment block has a helper method credentials() defined which can be used to access pre-defined Credentials by their 
#identifier in the Jenkins environment.

==========now Lets see something called "options" , the 3rd type of directive==================


#The options directive allows configuring Pipeline-specific options from within the Pipeline itself. 
#Pipeline provides a number of these options, such as @buildDiscarder, but they may also be provided by plugins, such as @timestamps

#Required           No
#Parameters         None
#Allowed            Only once, inside the pipeline block

Available Options
buildDiscarder
Persist artifacts and console output for the specific number of recent Pipeline runs. For example: options { buildDiscarder(logRotator(numToKeepStr: '1')) }

disableConcurrentBuilds
    Disallow concurrent executions of the Pipeline. Can be useful for preventing simultaneous accesses to shared resources, etc. For example: options { disableConcurrentBuilds() }

skipDefaultCheckout
Skip checking out code from source control by default in the agent directive. For example: options { skipDefaultCheckout() }

timeout
Set a timeout period for the Pipeline run, after which Jenkins should abort the Pipeline. For example: options { timeout(time: 1, unit: 'HOURS') }

retry
On failure, retry the entire Pipeline the specified number of times. For example: options { retry(3) }

timestamps
Prepend all console output generated by the Pipeline run with the time at which the line was emitted. For example: options { timestamps() }

Example
Jenkinsfile (Declarative Pipeline)
pipeline {
    agent any
    options {
        timeout(time: 1, unit: 'HOURS') 
    }
    stages {
        stage('Example') {
            steps {
                echo 'Hello World'
            }
        }
    }
}

what does above code means: -Specifying a global execution timeout of one hour, after which Jenkins will abort the Pipeline run.

=================================================https://issues.jenkins-ci.org/browse/INFRA-1053 =============


============ 4th type of directive are @parameters ===================

The parameters directive provides a list of parameters which a user should provide when triggering the Pipeline. The values for these user-specified parameters are made available to Pipeline steps via the params object, see the Example for its specific usage.

Required
No
Parameters
None
Allowed
Only once, inside the pipeline block.
Available Parameters
string
A parameter of a string type, for example: parameters { string(name: 'DEPLOY_ENV', defaultValue: 'staging', description: '') }

booleanParam
A boolean parameter, for example: parameters { booleanParam(name: 'DEBUG_BUILD', defaultValue: true, description: '') }

Example
Jenkinsfile (Declarative Pipeline)
pipeline {
    agent any
    parameters {
        string(name: 'PERSON', defaultValue: 'Mr Jenkins', description: 'Who should I say hello to?')
    }
    stages {
        stage('Example') {
            steps {
                echo "Hello ${params.PERSON}"
            }
        }
    }
}

=================== https://issues.jenkins-ci.org/browse/INFRA-1053

triggers
The triggers directive defines the automated ways in which the Pipeline should be re-triggered. For Pipelines which are integrated with a source such as GitHub or BitBucket, triggers may not be necessary as webhooks-based integration will likely already be present. Currently the only two available triggers are cron and pollSCM.

Required        No
Parameters      None
Allowed         Only once, inside the pipeline block.
@cron
Accepts a cron-style string to define a regular interval at which the Pipeline should be re-triggered, for example: triggers { cron('H 4/* 0 0 1-5') }

@pollSCM
Accepts a cron-style string to define a regular interval at which Jenkins should check for new source changes. If new changes exist, the Pipeline will be re-triggered. For example: triggers { pollSCM('H 4/* 0 0 1-5') }

-> The pollSCM trigger is only available in Jenkins 2.22 or later.
Example
Jenkinsfile (Declarative Pipeline)
pipeline {
    agent any
    triggers {
        cron('H 4/* 0 0 1-5')
    }
    stages {
        stage('Example') {
            steps {
                echo 'Hello World'
            }
        }
    }
}

@tools ======== another type of directive
#A section defining tools to auto-install and put on the PATH. This is ignored if agent none is specified.

Required            No
Parameters          None
Allowed             Inside the pipeline block or a stage block.
Supported Tools     maven, jdk, gradle
Example
Jenkinsfile (Declarative Pipeline)
pipeline {
    agent any
    tools {
        maven 'apache-maven-3.0.1' 
    }
    stages {
        stage('Example') {
            steps {
                sh 'mvn --version'
            }
        }
    }
}
note: The tool name must be pre-configured in Jenkins under Manage Jenkins → Global Tool Configuration.

=========== directive @when

The when directive allows the Pipeline to determine whether the stage should be executed depending on the given condition.

Required            No
Parameters          None
Allowed             Inside a stage directive

Built-in Conditions
@branch
Execute the stage when the branch being built matches the branch pattern given, for example: when { branch 'master' }

@environment
Execute the stage when the specified environment variable is set to the given value, for example: when { environment name: 'DEPLOY_TO', value: 'production' }

@expression
Execute the stage when the specified Groovy expression evaluates to true, for example: when { expression { return params.DEBUG_BUILD } }

##Example
Jenkinsfile (Declarative Pipeline)
pipeline {
    agent any
    stages {
        stage('Example Build') {
            steps {
                echo 'Hello World'
            }
        }
        stage('Example Deploy') {
            when {
                branch 'production'
            }
                echo 'Deploying'
            }
        }
    }
}

============NOW WE FINISH READING OF DIRECTIVE , LETS MOVE TO STEPS=========

WE WILL CREATE AN ANOTHER DOCUMNENT FOR THE SAME. 

https://jenkins.io/doc/pipeline/steps/

